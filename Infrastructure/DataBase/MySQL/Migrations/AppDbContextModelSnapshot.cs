// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingAssistant.Infrastructure.DataBase.MySQL;

#nullable disable

namespace TradingAssistant.Infrastructure.DataBase.MySQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Assets_Code");

                    b.ToTable("Assets", null, t =>
                        {
                            t.HasComment("Активы");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_AssetTypes_Code");

                    b.ToTable("AssetTypes", null, t =>
                        {
                            t.HasComment("Типы активов");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CRYPTO",
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5174),
                            Description = "Cryptocurrency"
                        },
                        new
                        {
                            Id = 2,
                            Code = "FIAT",
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5176),
                            Description = "Fiat currency"
                        },
                        new
                        {
                            Id = 3,
                            Code = "STOCK",
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5178),
                            Description = "Stock"
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Exchanges_Code");

                    b.ToTable("Exchanges", null, t =>
                        {
                            t.HasComment("Таблица бирж");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("ENUM('Decimal','Integer','Boolean','String','DateTime')")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_InstrumentProperties_Code");

                    b.ToTable("InstrumentProperties", null, t =>
                        {
                            t.HasComment("Свойства инструментов");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("boolean_value");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datetime_value");

                    b.Property<decimal?>("DecimalValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("decimal_value");

                    b.Property<long>("InstrumentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("IntegerValue")
                        .HasColumnType("int")
                        .HasColumnName("integer_value");

                    b.Property<long?>("PossibleValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<string>("StringValue")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("string_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PossibleValueId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("InstrumentId", "PropertyId", "PossibleValueId")
                        .IsUnique()
                        .HasDatabaseName("UX_InstrumentPropertyValues_UniqueComposite");

                    b.ToTable("InstrumentPropertyValues", null, t =>
                        {
                            t.HasComment("Значения свойств инструментов");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_InstrumentTypes_Code");

                    b.ToTable("InstrumentTypes", null, t =>
                        {
                            t.HasComment("Типы инструментов");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SPOT",
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5474),
                            Description = "Spot trading"
                        },
                        new
                        {
                            Id = 2,
                            Code = "PERPETUAL",
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5476),
                            Description = "Perpetual futures"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DELIVERY",
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5478),
                            Description = "Delivery futures"
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.OhlcvData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Close")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("close");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<decimal>("High")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("high");

                    b.Property<long>("InstrumentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Low")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasPrecision(28, 8)
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("open");

                    b.Property<int>("TimeframeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Volume")
                        .HasPrecision(36, 18)
                        .HasColumnType("decimal(36,18)")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("TimeframeId");

                    b.HasIndex("InstrumentId", "TimeframeId", "Timestamp")
                        .IsUnique()
                        .HasDatabaseName("UX_OHLCV_UniqueComposite");

                    b.ToTable("OHLCV", null, t =>
                        {
                            t.HasComment("OHLCV данные");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("NumericValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("numeric_value");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId", "Value")
                        .IsUnique()
                        .HasDatabaseName("UX_PropertyPossibleValues_UniqueComposite");

                    b.ToTable("PropertyPossibleValues", null, t =>
                        {
                            t.HasComment("Возможные значения свойств");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Timeframe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("ENUM('TICK','SECOND','MINUTE','HOUR','DAY','WEEK','MONTH','YEAR')")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Value", "Unit")
                        .IsUnique()
                        .HasDatabaseName("UX_Timeframes_UniqueComposite");

                    b.ToTable("Timeframes", null, t =>
                        {
                            t.HasComment("Таймфреймы");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5533),
                            Unit = "MINUTE",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5536),
                            Unit = "MINUTE",
                            Value = "5"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5538),
                            Unit = "MINUTE",
                            Value = "15"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5540),
                            Unit = "HOUR",
                            Value = "1"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5542),
                            Unit = "HOUR",
                            Value = "4"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 21, 16, 32, 21, 215, DateTimeKind.Utc).AddTicks(5544),
                            Unit = "DAY",
                            Value = "1"
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BaseAssetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<long>("QuoteAssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasDatabaseName("IX_TradingInstruments_Code");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("QuoteAssetId");

                    b.HasIndex("BaseAssetId", "QuoteAssetId")
                        .HasDatabaseName("IX_TradingInstruments_BaseAssetId_QuoteAssetId");

                    b.HasIndex("ExchangeId", "InstrumentTypeId")
                        .HasDatabaseName("IX_TradingInstruments_ExchangeId_InstrumentTypeId");

                    b.HasIndex("IsActive", "ExchangeId")
                        .HasDatabaseName("IX_TradingInstruments_IsActive_ExchangeId")
                        .HasFilter("is_active = 1");

                    b.HasIndex("BaseAssetId", "QuoteAssetId", "InstrumentTypeId")
                        .HasDatabaseName("IX_TradingInstruments_BaseAssetId_QuoteAssetId_InstrumentTypeId");

                    b.HasIndex("ExchangeId", "BaseAssetId", "QuoteAssetId")
                        .HasDatabaseName("IX_TradingInstruments_ExchangeId_BaseAssetId_QuoteAssetId");

                    b.HasIndex("ExchangeId", "InstrumentTypeId", "QuoteAssetId")
                        .HasDatabaseName("IX_TradingInstruments_ExchangeId_InstrumentTypeId_QuoteAssetId");

                    b.HasIndex("BaseAssetId", "QuoteAssetId", "ExchangeId", "InstrumentTypeId")
                        .IsUnique()
                        .HasDatabaseName("UX_TradingInstruments_UniqueComposite");

                    b.ToTable("TradingInstruments", null, t =>
                        {
                            t.HasComment("Торговые инструменты");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Asset", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentPropertyValue", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", "Instrument")
                        .WithMany("PropertyValues")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", "PossibleValue")
                        .WithMany("PropertyValues")
                        .HasForeignKey("PossibleValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", "Property")
                        .WithMany("PropertyValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("PossibleValue");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.OhlcvData", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", "Instrument")
                        .WithMany("OhlcvData")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Timeframe", "Timeframe")
                        .WithMany("OhlcvData")
                        .HasForeignKey("TimeframeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Timeframe");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", "Property")
                        .WithMany("PossibleValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Asset", "BaseAsset")
                        .WithMany("BaseInstruments")
                        .HasForeignKey("BaseAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Exchange", "Exchange")
                        .WithMany("TradingInstruments")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.InstrumentType", "InstrumentType")
                        .WithMany("TradingInstruments")
                        .HasForeignKey("InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Asset", "QuoteAsset")
                        .WithMany("QuoteInstruments")
                        .HasForeignKey("QuoteAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseAsset");

                    b.Navigation("Exchange");

                    b.Navigation("InstrumentType");

                    b.Navigation("QuoteAsset");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Asset", b =>
                {
                    b.Navigation("BaseInstruments");

                    b.Navigation("QuoteInstruments");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Exchange", b =>
                {
                    b.Navigation("TradingInstruments");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", b =>
                {
                    b.Navigation("PossibleValues");

                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentType", b =>
                {
                    b.Navigation("TradingInstruments");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", b =>
                {
                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Timeframe", b =>
                {
                    b.Navigation("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", b =>
                {
                    b.Navigation("OhlcvData");

                    b.Navigation("PropertyValues");
                });
#pragma warning restore 612, 618
        }
    }
}
