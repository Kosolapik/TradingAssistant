// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingAssistant.Infrastructure.DataBase.MySQL;

#nullable disable

namespace TradingAssistant.Infrastructure.DataBase.MySQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.MarketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("MarketTypes");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.OhlcvData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Close")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<double>("High")
                        .HasColumnType("double");

                    b.Property<double>("Low")
                        .HasColumnType("double");

                    b.Property<int>("MarketTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Open")
                        .HasColumnType("double");

                    b.Property<int>("SymbolId")
                        .HasColumnType("int");

                    b.Property<int>("TimeframeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Volume")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("MarketTypeId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("TimeframeId");

                    b.HasIndex("ExchangeId", "SymbolId", "MarketTypeId", "TimeframeId", "Timestamp");

                    b.ToTable("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BaseAsset", "QuoteAsset")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Timeframe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Value", "Unit")
                        .IsUnique();

                    b.ToTable("Timeframes");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.OhlcvData", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchange", "Exchange")
                        .WithMany("OhlcvData")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.MarketType", "MarketType")
                        .WithMany("OhlcvData")
                        .HasForeignKey("MarketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Symbol", "Symbol")
                        .WithMany("OhlcvData")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Timeframe", "Timeframe")
                        .WithMany("OhlcvData")
                        .HasForeignKey("TimeframeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("MarketType");

                    b.Navigation("Symbol");

                    b.Navigation("Timeframe");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchange", b =>
                {
                    b.Navigation("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.MarketType", b =>
                {
                    b.Navigation("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Symbol", b =>
                {
                    b.Navigation("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Timeframe", b =>
                {
                    b.Navigation("OhlcvData");
                });
#pragma warning restore 612, 618
        }
    }
}
