// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingAssistant.Infrastructure.DataBase.MySQL;

#nullable disable

namespace TradingAssistant.Infrastructure.DataBase.MySQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250726185313_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.MarketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("MarketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Spot trading",
                            Type = "Spot"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Linear perpetual contracts",
                            Type = "PerpetualLinear"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Linear delivery contracts",
                            Type = "DeliveryLinear"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Inverse perpetual contracts",
                            Type = "PerpetualInverse"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Inverse delivery contracts",
                            Type = "DeliveryInverse"
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.OhlcvData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<double>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("double");

                    b.Property<double>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("double");

                    b.Property<double>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("double");

                    b.Property<int>("SymbolId")
                        .HasColumnType("int");

                    b.Property<int>("TimeframeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TimeframeId");

                    b.HasIndex("SymbolId", "TimeframeId", "Timestamp")
                        .IsUnique();

                    b.ToTable("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("ContractSize")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MarketTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxLongLeverage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxShortLeverage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxTradeQuantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("MinNotionalValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("MinTradeQuantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PriceDecimals")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceStep")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<int?>("QuantityDecimals")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityStep")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("MarketTypeId");

                    b.HasIndex("Name", "ExchangeId")
                        .IsUnique();

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Timeframe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Value", "Unit")
                        .IsUnique();

                    b.ToTable("Timeframes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Unit = "minute",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Unit = "minute",
                            Value = 5
                        },
                        new
                        {
                            Id = 3,
                            Unit = "minute",
                            Value = 15
                        },
                        new
                        {
                            Id = 4,
                            Unit = "hour",
                            Value = 1
                        },
                        new
                        {
                            Id = 5,
                            Unit = "hour",
                            Value = 4
                        },
                        new
                        {
                            Id = 6,
                            Unit = "day",
                            Value = 1
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.OhlcvData", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Symbol", "Symbol")
                        .WithMany("OhlcvData")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Timeframe", "Timeframe")
                        .WithMany("OhlcvData")
                        .HasForeignKey("TimeframeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Symbol");

                    b.Navigation("Timeframe");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Symbol", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchange", "Exchange")
                        .WithMany("Symbols")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.MarketType", "MarketType")
                        .WithMany("Symbols")
                        .HasForeignKey("MarketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("MarketType");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchange", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.MarketType", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Symbol", b =>
                {
                    b.Navigation("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Timeframe", b =>
                {
                    b.Navigation("OhlcvData");
                });
#pragma warning restore 612, 618
        }
    }
}
