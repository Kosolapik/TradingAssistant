// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingAssistant.Infrastructure.DataBase.PostgreSQL;

#nullable disable

namespace TradingAssistant.Infrastructure.DataBase.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    partial class PostgreSqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "property_data_type", new[] { "decimal_type", "integer_type", "boolean_type", "string_type", "date_time_type" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "timeframe_unit", new[] { "tick", "second", "minute", "hour", "day", "week", "month", "year" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId")
                        .HasDatabaseName("ix_assets_asset_type_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_code");

                    b.ToTable("assets", null, t =>
                        {
                            t.HasComment("Активы");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_AssetTypes_Code");

                    b.ToTable("AssetTypes", null, t =>
                        {
                            t.HasComment("Типы активов");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CRYPTO",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cryptocurrency",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "FIAT",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fiat currency",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Code = "STOCK",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stock",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Exchanges_Code");

                    b.ToTable("Exchanges", null, t =>
                        {
                            t.HasComment("Таблица бирж");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("property_data_type")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_instrument_properties_code");

                    b.ToTable("instrument_properties", null, t =>
                        {
                            t.HasComment("Свойства инструментов");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean")
                        .HasColumnName("boolean_value");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime_value");

                    b.Property<decimal?>("DecimalValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)")
                        .HasColumnName("decimal_value");

                    b.Property<long>("InstrumentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("IntegerValue")
                        .HasColumnType("integer")
                        .HasColumnName("integer_value");

                    b.Property<long?>("PossibleValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<string>("StringValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("string_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PossibleValueId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("InstrumentId", "PropertyId")
                        .IsUnique()
                        .HasDatabaseName("ux_instrument_property_values_unique");

                    b.ToTable("instrument_property_values", null, t =>
                        {
                            t.HasComment("Значения свойств инструментов");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_InstrumentTypes_Code");

                    b.ToTable("InstrumentTypes", null, t =>
                        {
                            t.HasComment("Типы инструментов");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SPOT",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Spot trading",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "PERPETUAL",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Perpetual futures",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Code = "DELIVERY",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Delivery futures",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.OhlcvData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Close")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("close");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("High")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("high");

                    b.Property<long>("InstrumentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Low")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("low");

                    b.Property<decimal>("Open")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("open");

                    b.Property<int>("TimeframeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Volume")
                        .HasPrecision(36, 18)
                        .HasColumnType("numeric(36,18)")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("TimeframeId");

                    b.HasIndex("InstrumentId", "TimeframeId", "Timestamp")
                        .IsUnique()
                        .HasDatabaseName("ux_ohlcv_data_unique");

                    b.ToTable("ohlcv_data", null, t =>
                        {
                            t.HasComment("OHLCV данные");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId", "Value")
                        .IsUnique()
                        .HasDatabaseName("UX_PropertyPossibleValues_UniqueComposite");

                    b.ToTable("PropertyPossibleValues", null, t =>
                        {
                            t.HasComment("Возможные значения свойств");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Timeframe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("timeframe_unit")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Value", "Unit")
                        .IsUnique()
                        .HasDatabaseName("ux_timeframes_unique");

                    b.ToTable("timeframes", null, t =>
                        {
                            t.HasComment("Таймфреймы");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Unit = "minute",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Unit = "minute",
                            Value = "5"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Unit = "minute",
                            Value = "15"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Unit = "hour",
                            Value = "1"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Unit = "hour",
                            Value = "4"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Unit = "day",
                            Value = "1"
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseAssetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstrumentTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<long>("QuoteAssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasDatabaseName("ix_trading_instruments_code");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("QuoteAssetId");

                    b.HasIndex("ExchangeId", "InstrumentTypeId")
                        .HasDatabaseName("ix_trading_instruments_exchange_instrument");

                    b.HasIndex("IsActive", "ExchangeId")
                        .HasDatabaseName("ix_trading_instruments_active_exchange");

                    b.HasIndex("ExchangeId", "InstrumentTypeId", "QuoteAssetId")
                        .HasDatabaseName("ix_trading_instruments_exchange_instrument_quote");

                    b.HasIndex("BaseAssetId", "QuoteAssetId", "ExchangeId", "InstrumentTypeId")
                        .IsUnique()
                        .HasDatabaseName("ux_trading_instruments_unique");

                    b.ToTable("trading_instruments", null, t =>
                        {
                            t.HasComment("Торговые инструменты");
                        });
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Asset", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentPropertyValue", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", "Instrument")
                        .WithMany("PropertyValues")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", "PossibleValue")
                        .WithMany("PropertyValues")
                        .HasForeignKey("PossibleValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", "Property")
                        .WithMany("PropertyValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("PossibleValue");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.OhlcvData", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", "Instrument")
                        .WithMany("OhlcvData")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Timeframe", "Timeframe")
                        .WithMany("OhlcvData")
                        .HasForeignKey("TimeframeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Timeframe");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", "Property")
                        .WithMany("PossibleValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", b =>
                {
                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Asset", "BaseAsset")
                        .WithMany("BaseInstruments")
                        .HasForeignKey("BaseAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Exchange", "Exchange")
                        .WithMany("TradingInstruments")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.InstrumentType", "InstrumentType")
                        .WithMany("TradingInstruments")
                        .HasForeignKey("InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradingAssistant.Core.Entities.Exchanges.Asset", "QuoteAsset")
                        .WithMany("QuoteInstruments")
                        .HasForeignKey("QuoteAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseAsset");

                    b.Navigation("Exchange");

                    b.Navigation("InstrumentType");

                    b.Navigation("QuoteAsset");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Asset", b =>
                {
                    b.Navigation("BaseInstruments");

                    b.Navigation("QuoteInstruments");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Exchange", b =>
                {
                    b.Navigation("TradingInstruments");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentProperty", b =>
                {
                    b.Navigation("PossibleValues");

                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.InstrumentType", b =>
                {
                    b.Navigation("TradingInstruments");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.PropertyPossibleValue", b =>
                {
                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.Timeframe", b =>
                {
                    b.Navigation("OhlcvData");
                });

            modelBuilder.Entity("TradingAssistant.Core.Entities.Exchanges.TradingInstrument", b =>
                {
                    b.Navigation("OhlcvData");

                    b.Navigation("PropertyValues");
                });
#pragma warning restore 612, 618
        }
    }
}
